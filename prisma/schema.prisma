// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    phone         String?
    password      String?
    emailVerified DateTime?
    image         String?
    age           String?
    gender        String?
    occupation    String?
    expertise     String?
    isAdmin       Boolean     @default(false)
    approved      Boolean     @default(false)
    accounts      Account[]
    UserEvent     UserEvent[]
}

model UserEvent {
    id         String   @id @default(cuid())
    attendance Boolean?
    hours      String?
    reqCert    Boolean? @default(false)
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    events     Event    @relation(fields: [eventId], references: [id])
    eventId    String

    @@unique([userId, eventId])
}

model Event {
    id               String      @id @default(cuid())
    name             String
    date             String
    location         String
    startTime        String
    EndTime          String
    description      String?
    organizerName    String?
    organizerContact String?
    completed        Boolean     @default(false)
    UserEvent        UserEvent[]
}
